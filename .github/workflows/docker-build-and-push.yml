name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-and-push.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - '.github/workflows/docker-build-and-push.yml'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push image to registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nr-permitting-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge with sigstore/fulcio
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            # Set version tag for releases
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=NR Permitting API
            org.opencontainers.image.description=Natural Resources Permitting API with Azure Integration
            org.opencontainers.image.vendor=NR Permitting Team

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build args for optimization
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test Docker image
        run: |
          # Load the built image for testing
          docker buildx build --load --tag test-image ./src
          
          # Run basic smoke test
          echo "Running container smoke test..."
          docker run --rm -d --name test-container -p 3001:3000 \
            -e NODE_ENV=test \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_NAME=test \
            -e DB_USER=test \
            -e DB_PASSWORD=test \
            -e KEY_VAULT_URL=https://placeholder.vault.azure.net/ \
            test-image
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          max_attempts=30
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -f http://localhost:3001/health/liveness; then
              echo "Container health check passed!"
              break
            fi
            echo "Attempt $attempt/$max_attempts failed, retrying in 2 seconds..."
            sleep 2
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "Container health check failed after $max_attempts attempts"
            docker logs test-container
            exit 1
          fi
          
          # Cleanup
          docker stop test-container

      - name: Push Docker image
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push_to_registry == true)
        uses: docker/build-push-action@v5
        with:
          context: ./src
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build args for optimization
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Generate artifact attestation
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || inputs.push_to_registry == true)
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.meta.outputs.digest }}
          push-to-registry: true

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-notification:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: Deployment Summary
        run: |
          echo "## Docker Image Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` (if main branch)" >> $GITHUB_STEP_SUMMARY
          echo "- \`sha-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 3000:3000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-and-push.result }}" = "success" ]; then
            echo "✅ **Build Status:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **Security Scan:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Scan:** Issues detected - check Security tab" >> $GITHUB_STEP_SUMMARY
          fi
